<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
	<!ENTITY % wdb.entities SYSTEM "../docbook/wdb_entities.ent">
	%wdb.entities;
]
>

<chapter id="cha:stationload_system-design-specification">
	
	<title>WDB-POINTlOAD - System Design Specification</title>
	
	<sect1>
		<title>Introduction</title>
		
		<para>This document is the System Design Specification of the vega wdb databse point data loading program.</para>
		
		<sect2>
			<title>Purpose</title>
			
			<para>The system design specification provides a comprehensive overview of
			      the design of the software system. This is used to ensure agreement between
			      the developers of the vega wdb and loader system. It is also intended to make it
                              easier for new developers of vega wdb and its loaders to become productive 
                              developing on the system.</para>
			
		</sect2>
		
	</sect1>
	
	<sect1>
		<title>System Overview</title>
		
		<sect2>
			<title>Work Domain</title>
			
			<figure id="fig:pointload_work-domain">
				<title>Work domain and work flow of the PointLoad system</title>
				<mediaobject>
					<imageobject role="html">
						<imagedata align="center"
							fileref="gfx/pointload_work-domain.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
			
			<para><xref linkend="fig:pointload_work-domain"/> provides an overview of
				the work domain and the work flow of the wdb-pointLoad utility.</para>
			
		</sect2>
		
		<sect2>
			<title>Technical Platform</title>
			
			<para>The wdb-pointLoad software requires the following operating environment:</para>
			
			<itemizedlist>
				<listitem>
					<para>Hardware: Desktop PC</para>
				</listitem>
				<listitem>
					<para>Operating System: Linux</para>
				</listitem>
				<listitem>
					<para>PostgreSQL version 9.x.x</para>
				</listitem>
				<listitem>
					<para>libpqxx version 2.6.8</para>
				</listitem>
				<listitem>
					<para>Boost 1.33.x</para>
				</listitem>
				<listitem>
					<para>liblog4cpp 1.0</para>
				</listitem>
				<listitem>
					<para>libfimex version 0.37.x</para>
				</listitem>
				<listitem>
					<para>libfelt version 0.36.0</para>
				</listitem>
				<listitem>
					<para>GRIB API version 1.9.9</para>
				</listitem>
				<listitem>
					<para>libnetcdf</para>
				</listitem>
			</itemizedlist>
			
		</sect2>
		
	</sect1>
	
	<sect1>
		<title>System Architecture</title>
		
		<para>The following section describes the architecture of the wdb-pointLoad utility.</para>
		
		<sect2>
			<title>Components</title>
			
                        <para>The wdb-pointLoad system consists of three logical components. Each of these
                                components handle one of the key sequences of the task. The main StationLoad
                                program generally takes as an in-arguments to the program the connection
                                parameters to the STINFOSYS database where stations meta-data are hosted.
                                The STInfosysDatabseConnection will query all station records and forward
                                them to the WDBDatabaseConnection object. Then the WDBDatabaseConnection
                                object will check for new and station that should be updated.
                                </para>
			
			<sect3>
                                <title>Database object initialization</title>
				
                                <para>The main app will initialize connections towards STINFOSYS and WDB.</para>
				
			</sect3>
			
			<sect3>
                                <title>Getting the stations from STINFOSYS</title>
				
                                <para>STInfosysDatabseConnection extracts records and fills container.
                                      From cmd line we can limit this result based on the last update
                                      date.</para>
				
			</sect3>
			
			<sect3>
                                <title>Updating stations in WDB</title>
				
                                <para>The updateStations method of the WDBDatabaseConnection class takes the
                                        container with STINFOSYS data, compares it with the WDB state and then
                                        inserts new or updates existing records.</para>
				
			</sect3>
			
		</sect2>
		
		<sect2>
			<title>Dependencies</title>
			
			<sect3>
				<title>libPQXX</title>
				
				<para>The database API used in the PointLoad software is the libPQXX library for C++.</para>
				
			</sect3>
				
			<sect3>
				<title>libfimex</title>
				
				<para>
                                      libfimex is used to interpolate grided data in requested points.
                                      The points are given as template file in NetCDF format.
                                </para>

			</sect3>
		
			<sect3>
				<title>libfelt</title>
				
				<para>
                                      libfelt is used to to directly read FELT files.
                                      It is used to obtain header info about data fileds.
                                </para>

			</sect3>

			<sect3>
				<title>grib_api</title>
				
				<para>
                                      grib_api is used to to directly read GRIB files.
                                      It is used to obtain header info about data fileds.
                                </para>

			</sect3>

			<sect3>
				<title>Log4cpp</title>
				
				<para>Log4cpp is library of C++ classes for flexible logging to files,
				      syslog, IDSA and other destinations. It is modeled on the Log4j Java
				      library. Log4cpp is used to handle logging from the PointLoad system.
				      Log4cpp is encapsulated by the wdbLogHandler library.</para>
				
			</sect3>
			
			<sect3>
				<title>wdbException</title>
				
				<para>WdbException is the default exception class for the WDB system based
				      on std::exception. It is encapsulated in the wdbException library.</para>
				
			</sect3>
			
		</sect2>
		
		<sect2>
			<title>Program Interface</title>
			
			<para>wdb-pointLoad is a command-line tool. Its primary functionality is executed by writing the program name followed by the
			      configuration file, stations list, file and file type  to be loaded, as follows:
                        </para>
			
                        <para> <command>wdb-pointLoad</command> --config /etc/loadfelteps.cfg fimex.interpolate.template stations.nc --name epsfeltfile.dat --type felt</para>
			
                        <para>In addition to the base functionality, the wdb-pointLoad offers a number of additional options.</para>
			<itemizedlist>
				<listitem>
                                        <para>--help</para>
					<para>Produces the help message and then exits.</para>
				</listitem>
				<listitem>
					<para>--version</para>
					<para>Produces version information and then exit.</para>
				</listitem>
				<listitem>
					<para>--config MAIN.CONF</para>
					<para>
                                              Specify main configuration file to run wdb-pointLoad.
                                              The main configuration can set all the cpmmand line options and it's usage is higly recommended.
                                              (see examples: /usr/share/doc/wdb-pointLoad/etc/felt/load.conf)
                                        </para>
				</listitem>
                                <listitem>
	                                <para>--logfile FILENAME.LOG</para>
                                        <para>By default the log messages will be sent to standard output. You can use this option to specify the logging file instead.</para>
                                </listitem>
                                <listitem>
					<para>--loglevel LEVEL</para>
                                        <para>Sets the logging level, from 1 (most) to 5 (least)</para>
                                </listitem>
				<listitem>
					<para>--name FILENAME.IN</para>
					<para>Name of the file that contains gridded data.</para>
				</listitem>
				<listitem>
					<para>--output FILENAME.OUT</para>
                                        <para>By default the extracted data is sent to the standard output. Use this option to specify output file instead.</para>
				</listitem>
				<listitem>
					<para>--type TYPE</para>
					<para>Type of the gridded file to be extracted - TYPE can take any of values felt | grib1 | grib2 | netcdf.</para>
				</listitem>
				<listitem>
					<para>-d DBNAME</para>
					<para>--database=DBNAME</para>
					<para>Specify the database name to connect to (e.g., wdb).</para>
				</listitem>
				<listitem>
					<para>-h DBHOST</para>
					<para>--host=DBHOST</para>
					<para>Specify the database host to connect to (e.g., somehost.met.no).</para>
				</listitem>
				<listitem>
					<para>-u DBUSER</para>
					<para>--user=DBUSER</para>
					<para>Specify the WDB user to connect as (e.g., wdb).</para>
				</listitem>
				<listitem>
					<para>-p DBPORT</para>
					<para>--port=DBPORT</para>
					<para>Specify the database port to connect to (e.g., 5432).</para>
				</listitem>
				<listitem>
					<para>--validtime.config VALIDTIME.CONF</para>
					<para>
                                              Specify validtime configuration file (applicable for FELT, GRIB1 and GRIB2).
                                        </para>
                                        <para>
                                              For further information look documentation for: wdb-feltLoad (https://github.com/wdb/wdb-feltload) or wdb-gribLoad (https://github.com/wdb/wdb-gribload).
                                        </para>
                                        <para>
                                              In addtion, some examples can be found inside the wdb-pointLoad package: /usr/share/doc/wdb-pointLoad/etc/felt/validtime.cfg.
                                        </para>
				</listitem>
				<listitem>
					<para>--dataprovider.config DATAPROVIDER.CONF</para>
					<para>
                                              Specify dataprovider configuration file (applicable for FELT, GRIB1 and GRIB2).
                                        </para>
                                        <para> For further information look documentation for:
                                              wdb-feltLoad (https://github.com/wdb/wdb-feltload) or wdb-gribLoad (https://github.com/wdb/wdb-gribload).
                                        </para>
                                        <para>
                                              In addtion, some examples can be found inside the wdb-pointLoad package: /usr/share/doc/wdb-pointLoad/etc/felt/dataprovider.cfg.
                                        </para>
				</listitem>
				<listitem>
					<para>--valueparameter.config VALUEPARAMETER.CONF</para>
					<para>
                                              Specify valueparameter configuration file (applicable for FELT, GRIB1 and NETCDF).
                                        </para>
                                        <para>
                                        For further information look documentation for:
                                        wdb-feltLoad (https://github.com/wdb/wdb-feltload) or wdb-gribLoad (https://github.com/wdb/wdb-gribload).
                                        </para>
                                        <para>
                                              In addtion, some examples can be found inside the wdb-pointLoad package: /usr/share/doc/wdb-pointLoad/etc/felt/valueparameter.cfg.
                                        </para>
				</listitem>
				<listitem>
					<para>--levelparameter.config LEVELPARAMETER.CONF</para>
					<para>
                                              Specify levelparameter configuration file (applicable for FELT, GRIB1 and NETCDF).
                                        </para>
                                        <para>
                                              For further information look documentation for:
                                              wdb-feltLoad (https://github.com/wdb/wdb-feltload) or wdb-gribLoad (https://github.com/wdb/wdb-gribload).
                                        </para>
                                        <para>
                                              In addtion, some examples can be found inside the wdb-pointLoad package: /usr/share/doc/wdb-pointLoad/etc/felt/levelparameter.cfg.
                                        </para>
				</listitem>
				<listitem>
					<para>--leveladditions.config LEVELADDITIONS.CONF</para>
					<para>
                                              Specify leveladditions configuration file (applicable for FELT, GRIB1 and NETCDF].
                                        </para>
                                        <para>
                                              For further information look documentation for:
                                              wdb-feltLoad (https://github.com/wdb/wdb-feltload) or wdb-gribLoad (https://github.com/wdb/wdb-gribload).
                                        </para>
                                        <para>
                                              In addtion, some examples can be found inside the wdb-pointLoad package: /usr/share/doc/wdb-pointLoad/etc/felt/leveladdtions.cfg.
                                        </para>
				</listitem>
				<listitem>
					<para>--valueparameter2.config VALUEPARAMETER2.CONF</para>
					<para>
                                              Specify valueparameter2 configuration file (applicable for GRIB2).
                                        </para>
                                        <para>
                                              For further information look documentation for: wdb-gribLoad (see https://github.com/wdb/wdb-gribload).
                                        </para>
                                        <para>
                                              In addtion, some examples can be found inside the wdb-pointLoad package: /usr/share/doc/wdb-pointLoad/etc/grib2/valueparameter2.cfg.
                                        </para>
				</listitem>
				<listitem>
					<para>--levelparameter2.config LEVELPARAMETER2.CONF</para>
					<para>
                                              Specify levelparameter2 configuration file (applicable for GRIB2).
                                        </para>
                                        <para>
                                              For further information look documentation for: wdb-gribLoad (see https://github.com/wdb/wdb-gribload).
                                        </para>
                                        <para>
                                              In addtion, some examples can be found inside the wdb-pointLoad package: /usr/share/doc/wdb-pointLoad/etc/grib2/levelparameter2.cfg.
                                        </para>
				</listitem>
				<listitem>
					<para>--leveladditions2.config LEVELADDITIONS2.CONF</para>
					<para>
                                              Specify leveladditions2 configuration file (applicable for GRIB2).
                                        </para>
                                        <para>
                                              For further information look documentation for: wdb-gribLoad (see https://github.com/wdb/wdb-gribload).
                                        </para>
                                        <para>
                                              In addtion, some examples can be found inside the wdb-pointLoad package: /usr/share/doc/wdb-pointLoad/etc/grib2/leveladdtions2.cfg.
                                        </para>
				</listitem>
				<listitem>
					<para>--fimex.config FIMEXREADER.XML</para>
					<para>
                                              Specify fimex reader configuration file.
                                              For more info on fimex and template interpolation consult https://wiki.met.no/fimex/start.
                                        </para>
                                        <para>
                                              In addtion, some examples can be found inside the wdb-pointLoad package: /usr/share/doc/wdb-pointLoad/etc/grib/gribreader.xml.
                                        </para>
				</listitem>
				<listitem>
                                        <para>--fimex.interpolate.template TEMPLATE.NC</para>
					<para>
                                              Specify file used in fimex template interpolation (describes latitude/longitude values for points of interest).
                                              For more info on fimex and template interpolation consult https://wiki.met.no/fimex/start.
                                        </para>
                                        <para>
                                              In addtion, some examples can be found inside the wdb-pointLoad package: /usr/share/doc/wdb-pointLoad/etc/grib/stations.nc.
                                        </para>
				</listitem>

			</itemizedlist>
			
		</sect2>
		
	</sect1>
	
	<sect1>
		<title>Core Design</title>
		
		<para>The following section describes the core design of the wdb-pointLoad utility.</para>
		
		<sect2>
			<title>VEGA WDB Database Design</title>
			
                        <para>The data from the gridded data files (felt/grib1/grib2/netcdf) are extracted and then stored in vega wdb database.
			      For closer look into design and functionality look into documentation of vega wdb database and other vega related utilities.
                        </para>
			
		</sect2>
		
		<sect2>
			<title>Classes and Functionality</title>
			
			<para><xref linkend="fig:pointload_class-diagram"/> is the class diagram of
				the wdb-pointLoad system. It describes the classes in the system, as well as the
				interrelationship of the classes with the various function sets.</para>
			
			<figure id="fig:pointload_class-diagram">
				<title>Class diagram of the wdb-pointLoad system</title>
				<mediaobject>
					<imageobject role="html">
						<imagedata align="center"
							fileref="gfx/pointload_class-diagram.png"
							format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
			
			<para>This is not intended to be an exhaustive description of the classes and
				functions in the program; for that, review the code iself.</para>
			
		</sect2>
		
		<sect2>
			<title>Main Program Routine</title>
			
			<para>The functionality of the main program is as follows:</para>
			
			<itemizedlist>
				<listitem>
					<para>Parse the options from the command line</para>
				</listitem>
				<listitem>
					<para>
						Check the gridded file type and instantiate appropriate loader.
                                                The Loader::load() method creates either FeltLoader, GribLoader or NetCDFLoader object.
	                                        NOTE: At the moment, felt, grib1, grib and netcdf types are supported.
                                        </para>
				</listitem>
				<listitem>
					<para>
						Open the netcdf template file - contains geographical locations for points where the gridded data is to be interpolated ( Loader::openTemplateCDM(...) ).
                                        </para>
				</listitem>
				<listitem>
					<para>
						FileLoader::load(...) is used to start extracting point data from gridded data files ( FeltLoader, GribLoader and NetCDFLoader do inherit FileLoader class ).
                                        </para>
				</listitem>
				<listitem>
					<para>
						FileLoader::load(...) calls FileLoader::openCDM() -> opens gridded data file creates corresponding CDM model ( libfimex used and read configuration is needed ).
                                        </para>
				</listitem>
				<listitem>
					<para>
						FileLoader::load(...) calls FileLoader::processCDM() -> extracts wind components if requested ( CDMProcessor::rotateVectorToLatLon(...) ).
                                        </para>
				</listitem>
				<listitem>
					<para>
						FileLoader::load(...) calls FileLoader::interpolateCDM() -> interpolates the gridded data into the point of interest ( CDMInterpolator::changeProjection(...) ).
                                        </para>
				</listitem>
                                <listitem>
					<para>
                                        	FileLoader::load(...) calls FileLoader::timeFromCDM() -> extracts various time related information ( time axis from CDM model )
					</para>
                                </listitem>
                                <listitem>
					<para>
                                        	FileLoader::load(...) calls FileLoader::loadInterpolated(...) -> overloaded method that extracts point data (see FeltLoader::loadInterpolated, GribLoader::loadInterpolated or NetCDF::loadInterpolated)
					</para>
                                </listitem>
				<listitem>
                                        <para>
					    	FileLoader::loadInterpolated(...) -> iterates through file and creates EntryToLoad object for each record that is to be extracted.
                                              	The list of parameters we are interested in and how are they to be mapped when inserted into vega wdb are prescribed in the configuration files.
                                              	This apporach is taken from existing wdb-feltload na wdb-gribload utilities, look into their respective documentation for deeper understanding.
                                        </para>
				</listitem>
				<listitem>
					<para>
						FileLoader::loadInterpolated(...) calls FileLoader::loadEntries() -> iterates through the list of EntryToLoad objects; reads data from interpolated CDM model for each point, for every time step on the time axis and for all ensemble memebers; checks the levels to be loaded (as defined in configuration files); sends data lines to standard out or to a predefined file; data is written in the wdb-fastLoad compatible format
					</para>
				</listitem>

				<listitem>
					<para>
						FileLoader::loadInterpolated(...) calls FileLoader::loadWindEntries()() -> similar as File::loadEntries() but handles only wind components if they were requested vima main config file.
					</para>
				</listitem>

				<listitem>
					<para>Terminate the program</para>
				</listitem>
			</itemizedlist>
			
		</sect2>
		
		<sect2>
			<title>STIStationRecord</title>
			
                        <para>The STIStationRecord class encapsulates a single STINFOSYS record as defined in station table.
                              It inherits pqxx::connection class.</para>
		</sect2>
		
		<sect2>
			<title>WDBStationRecord</title>

			<para>The WDBStationRecord class encapsulates a single WDB palce point record.</para>
		</sect2>

		<sect2>
                        <title>STInfosysDatabaseConnection</title>
			
                        <para>The STInfosysDatabase class encapsulates the STINFOSYS databse. Useful function:</para>
			
			<sect3>
                                <title>getAllStations</title>
				
                                <para>Extracts stations from the station table. Takes out all stations that are still in operation and that have the newest edited_at value</para>
				
			</sect3>
			
		</sect2>
		
		<sect2>
                        <title>WDBDatabaseConnection</title>
			
                        <para>The WDBDatabaseConnection class inherits pqxx::conection.
                                Contains function calls for all the WDB database access.</para>
			
			<para>To maximize performance during loading, most SQL statements and cursors
				are prepared and declared only once. The database must be indexed such that
				all searches made occur using indexed search.</para>
			
                        <para>updateStations is the most important function. here we will loop through all
                              the records from STINFOSYS and see if new station should be inserted. If some
                              station already exists we will check if lon/lat or times have been changed.
                              If so, we have to update it.</para>
			
                        <para>IMPORTANT-. WDB is using two placenamespaceids - default and 4365.
                              In default we are using station.stationid as placename value.
                              In 4365 we are using station.wmono as placename value.</para>

			<sect3>
                                <title>GetAllStations</title>

                                <para></para>

			</sect3>
			
			<sect3>
                                <title>AddPlacePoint</title>

                                <para></para>
				
			</sect3>
			
                        <sect3>
                                <title>UpdatePlacePoint</title>
				
                                <para></para>

			</sect3>
			
			<sect3>
                                <title>getPlaceName</title>

                                <para></para>

                        </sect3>


		</sect2>
		
		<sect2>
			<title>Error Handling</title>
			
			<para>Errors in the StationLoad system are resolved through exception handling
			      based on the WdbException base class. All errors are logged using the
			      Log4cpp library for writing log files (encapsulated in wdbLog).</para>
			
		</sect2>
		
	</sect1>
	
</chapter>
