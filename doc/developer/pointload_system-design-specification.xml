<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
	<!ENTITY % wdb.entities SYSTEM "../docbook/wdb_entities.ent">
	%wdb.entities;
]
>

<chapter id="cha:stationload_system-design-specification">
	
	<title>PointLoad - System Design Specification</title>
	
	<sect1>
		<title>Introduction</title>
		
		<para>This document is the System Design Specification of the WDB weather point data loading program.</para>
		
		<sect2>
			<title>Purpose</title>
			
			<para>The system design specification provides a comprehensive overview of
			      the design of the software system. This is used to ensure agreement between
			      the developers of the WDB and loader system. It is also intended to make it
                              easier for new developers of WDB and its loaders to become productive 
                              developing on the system.</para>
			
		</sect2>
		
	</sect1>
	
	<sect1>
		<title>System Overview</title>
		
		<sect2>
			<title>Work Domain</title>
			
			<figure id="fig:pointload_work-domain">
				<title>Work domain and work flow of the PointLoad system</title>
				<mediaobject>
					<imageobject role="html">
						<imagedata align="center"
							fileref="gfx/pointload_work-domain.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
			
			<para><xref linkend="fig:pointload_work-domain"/> provides an overview of
				the work domain and the work flow of the WDB weather point data loading system.</para>
			
		</sect2>
		
		<sect2>
			<title>Technical Platform</title>
			
			<para>The stations loading software requires the following operating environment:</para>
			
			<itemizedlist>
				<listitem>
					<para>Hardware: Desktop PC</para>
				</listitem>
				<listitem>
					<para>Operating System: Linux</para>
				</listitem>
				<listitem>
					<para>PostgreSQL version 8.1.x</para>
				</listitem>
				<listitem>
					<para>libpqxx version 2.6.8</para>
				</listitem>
				<listitem>
					<para>Boost 1.33.x</para>
				</listitem>
				<listitem>
					<para>Log4Cpp version 1.0</para>
				</listitem>
				<listitem>
					<para>libfimex version 0.35.2</para>
				</listitem>
				<listitem>
					<para>libfelt version 0.36.0</para>
				</listitem>
				<listitem>
					<para>GRIB API version 1.9.9</para>
				</listitem>
			</itemizedlist>
			
		</sect2>
		
	</sect1>
	
	<sect1>
		<title>System Architecture</title>
		
		<para>The following section describes the architecture of the PointLoad system.</para>
		
		<sect2>
			<title>Components</title>
			
                        <para>The StationLoad system consists of three logical components. Each of these
                                components handle one of the key sequences of the task. The main StationLoad
                                program generally takes as an in-arguments to the program the connection
                                parameters to the STINFOSYS database where stations meta-data are hosted.
                                The STInfosysDatabseConnection will query all station records and forward
                                them to the WDBDatabaseConnection object. Then the WDBDatabaseConnection
                                object will check for new and station that should be updated.
                                </para>
			
			<sect3>
                                <title>Database object initialization</title>
				
                                <para>The main app will initialize connections towards STINFOSYS and WDB.</para>
				
			</sect3>
			
			<sect3>
                                <title>Getting the stations from STINFOSYS</title>
				
                                <para>STInfosysDatabseConnection extracts records and fills container.
                                      From cmd line we can limit this result based on the last update
                                      date.</para>
				
			</sect3>
			
			<sect3>
                                <title>Updating stations in WDB</title>
				
                                <para>The updateStations method of the WDBDatabaseConnection class takes the
                                        container with STINFOSYS data, compares it with the WDB state and then
                                        inserts new or updates existing records.</para>
				
			</sect3>
			
		</sect2>
		
		<sect2>
			<title>Dependencies</title>
			
			<sect3>
				<title>libPQXX</title>
				
				<para>The database API used in the PointLoad software is the libPQXX library for C++.</para>
				
			</sect3>
				
			<sect3>
				<title>libfimex</title>
				
				<para>
                                      libfimex is used to interpolate grided data in requested points.
                                      The points are given as template file in NetCDF format.
                                </para>

			</sect3>
		
			<sect3>
				<title>libfelt</title>
				
				<para>
                                      libfelt is used to to directly read FELT files.
                                      It is used to obtain header info about data fileds.
                                </para>

			</sect3>

			<sect3>
				<title>grib_api</title>
				
				<para>
                                      grib_api is used to to directly read GRIB files.
                                      It is used to obtain header info about data fileds.
                                </para>

			</sect3>

			<sect3>
				<title>Log4cpp</title>
				
				<para>Log4cpp is library of C++ classes for flexible logging to files,
				      syslog, IDSA and other destinations. It is modeled on the Log4j Java
				      library. Log4cpp is used to handle logging from the PointLoad system.
				      Log4cpp is encapsulated by the wdbLogHandler library.</para>
				
			</sect3>
			
			<sect3>
				<title>wdbException</title>
				
				<para>WdbException is the default exception class for the WDB system based
				      on std::exception. It is encapsulated in the wdbException library.</para>
				
			</sect3>
			
		</sect2>
		
		<sect2>
			<title>Program Interface</title>
			
			<para>PointLoad is a command-line tool. Its primary functionality 
                              is executed by writing the program name followed by the
			      configuration file, file and file type to be loaded, as follows:</para>
			
                        <para>wdb% bin/pointLoad --config /etc/loadfelteps.cfg --name epsfeltfile.dat --type felt</para>
			
                        <para>In addition to the base functionality, the PointLoad system offers a
				number of additional options.</para>
			<itemizedlist>
				<listitem>
                                        <para>--help</para>
                                        <para>Produces the help message and then exits.</para>
				</listitem>
				<listitem>
                                        <para>--version</para>
                                        <para>Produces version information and then exit.</para>
				</listitem>
                                <listitem>
                                        <para>--config</para>
                                        <para>Specify main configuration file to run pointLoad.
                                              (see example: /usr/share/doc/wdb-point/loadfelteps.cfg)</para>
				</listitem>
                                <listitem>
                                        <para>--name</para>
                                        <para>Name of the file to be loaded.</para>
				</listitem>
                                <listitem>
                                        <para>--type</para>
                                        <para>Type of the file to be loaded (FELT/GRIB).</para>
				</listitem>
                                <listitem>
                                        <para>--dry-run</para>
                                        <para>Dumps data in the format recognized by wdb-fastload (see wdb-fastload for further
                                              information). The data is dumped to stdout, and nothing will be sent to wdb database.
                                        </para>
                                </listitem>

			<listitem>
				<para>-d DBNAME</para>
				<para>--database=DBNAME</para>
				<para>Specify the database name to connect to (e.g., wdb).</para>
			</listitem>
			<listitem>
				<para>-h DBHOST</para>
				<para>--host=DBHOST</para>
				<para>Specify the database host to connect to (e.g., somehost.met.no).</para>
			</listitem>
			<listitem>
				<para>-u DBUSER</para>
				<para>--user=DBUSER</para>
				<para>Specify the WDB user to connect as. The database user must have
					      access to the wdb_grib role (this is will usually be the case if the
					      pointLoad process is being run by the creator of the database).
                                </para>
			</listitem>
			<listitem>
				<para>-p DBPORT</para>
				<para>--port=DBPORT</para>
              			<para>Specify the database port to connect to (e.g., 5432).</para>
			</listitem>
			<listitem>
				<para>--placenamespaceid</para>
				<para>Specify the namespace in wdb database where to load the data (default 0).</para>
			</listitem>
			<listitem>
				<para>--validtime.config</para>
				<para>
                                      Specify path to validtime configuration file for [FELT/GRIB1].
                                      For further information look documentation for feltLoad/gribLoad.
                                      (see example: /usr/share/doc/wdb-point/validtime.cfg)
                                </para>
			</listitem>
			<listitem>
				<para>--dataprovider.config</para>
				<para>
                                      Specify path to dataprovider configuration file for [FELT/GRIB1].
                                      For further information look documentation for feltLoad/gribLoad.
                                      (see example: /usr/share/doc/wdb-point/dataprovider.cfg)
                                 </para>
			</listitem>
			<listitem>
				<para>--valueparameter.config</para>
			        <para>
                                      Specify path to valueparameter configuration file for [FELT/GRIB1].
                                      For further information look documentation for feltLoad/gribLoad.
                                      (see example: /usr/share/doc/wdb-point/valueparameter.cfg)
                                </para>
			</listitem>
			<listitem>
				<para>--levelparameter.config</para>
				<para>
                                      Specify path to levelparameter configuration file for [FELT/GRIB1].
                                      For further information look documentation for feltLoad/gribLoad.
                                      (see example: /usr/share/doc/wdb-point/levelparameter.cfg)
                                </para>
			</listitem>
			<listitem>
				<para>--leveladditions.config</para>
			         <para>
                                       Specify path to leveladditions configuration file for [FELT/GRIB1].
                                       For further information look documentation for feltLoad/gribLoad.
                                       (see example: /usr/share/doc/wdb-point/leveladditions.cfg)
                                 </para>
			</listitem>
			<listitem>
				<para>--valueparameter2.config</para>
				<para>
                                      Specify path to valueparameter2 configuration file for [GRIB2].
                                       For further information look documentation for gribLoad.
                                       (see example: /usr/share/doc/wdb-point/valueparameter2.cfg)
                                </para>
			</listitem>
			<listitem>
				<para>--levelparameter2.config</para>
				<para>
                                      Specify path to levelparameter2 configuration file for [GRIB2].
                                      For further information look documentation for gribLoad.
                                      (see example: /usr/share/doc/wdb-point/levelparameter2.cfg)
                                </para>
			</listitem>
			<listitem>
				<para>--leveladditions2.config</para>
				<para>
                                      Specify path to leveladditions2 configuration file for [GRIB2].
                                      For further information look documentation for gribLoad.
                                      (see example: /usr/share/doc/wdb-point/leveladditions2.cfg)
                                </para>
			</listitem>
			<listitem>
				<para>--fimex.config</para>
				<para>
                                      Specify path to fimex reader configuration file.
                                      For further information look documentation for fimex.
                                      (see example: /usr/share/doc/wdb-point/fimexreader.xml)
                                </para>
			</listitem>
			<listitem>
				<para>--fimex.interpolate.template</para>
				<para>
                                      Specify path to file used in fimex template interpolation.
                                      For further information look documentation for fimex.
                                      (see example: /usr/share/doc/wdb-point/template.nc)
                                </para>
			</listitem>
			<listitem>
				<para>--stations</para>
				<para>
                                      Filter for which stations(from template) the data will actuallty be loaded.
                                      (example: --station '18700 1456')
                                </para>
			</listitem>

			</itemizedlist>
			
		</sect2>
		
	</sect1>
	
	<sect1>
		<title>Core Design</title>
		
		<para>The following section describes the core design of the PointLoad system.</para>
		
		<sect2>
			<title>Database Design</title>
			
                        <para>The data from the forecast fields are stored in the place related tables</para>
			
		</sect2>
		
		<sect2>
			<title>Classes and Functionality</title>
			
			<para><xref linkend="fig:stationload_class-diagram"/> is the class diagram of
				the StationLoad system. It describes the classes in the system, as well as the
				interrelationship of the classes with the various function sets.</para>
			
			<figure id="fig:stationload_class-diagram">
				<title>Class diagram of the StationLoad system</title>
				<mediaobject>
					<imageobject role="html">
						<imagedata align="center"
							fileref="gfx/stationload_class-diagram.png"
							format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
			
			<para>This is not intended to be an exhaustive description of the classes and
				functions in the program; for that, review the code documentation
				generated using Doxygen.</para>
			
		</sect2>
		
		<sect2>
			<title>Main Program Routine</title>
			
			<para>The functionality of the main program is as follows:</para>
			
			<itemizedlist>
				<listitem>
					<para>Parse the options from the command line</para>
				</listitem>
				<listitem>
					<para>Connect to the STINFOSYS database</para>
				</listitem>
				<listitem>
                                        <para>Read all STI stations records</para>
				</listitem>
				<listitem>
                                        <para>Forward these record to WDBDatabaseConnection object</para>
				</listitem>
                                <listitem>
                                        <para>call updateStations</para>
                                </listitem>

				<listitem>
                                        <para>Close database connections</para>
				</listitem>
				<listitem>
					<para>Terminate the program</para>
				</listitem>
			</itemizedlist>
			
		</sect2>
		
		<sect2>
			<title>STIStationRecord</title>
			
                        <para>The STIStationRecord class encapsulates a single STINFOSYS record as defined in station table.
                              It inherits pqxx::connection class.</para>
		</sect2>
		
		<sect2>
			<title>WDBStationRecord</title>

			<para>The WDBStationRecord class encapsulates a single WDB palce point record.</para>
		</sect2>

		<sect2>
                        <title>STInfosysDatabaseConnection</title>
			
                        <para>The STInfosysDatabase class encapsulates the STINFOSYS databse. Useful function:</para>
			
			<sect3>
                                <title>getAllStations</title>
				
                                <para>Extracts stations from the station table. Takes out all stations that are still in operation and that have the newest edited_at value</para>
				
			</sect3>
			
		</sect2>
		
		<sect2>
                        <title>WDBDatabaseConnection</title>
			
                        <para>The WDBDatabaseConnection class inherits pqxx::conection.
                                Contains function calls for all the WDB database access.</para>
			
			<para>To maximize performance during loading, most SQL statements and cursors
				are prepared and declared only once. The database must be indexed such that
				all searches made occur using indexed search.</para>
			
                        <para>updateStations is the most important function. here we will loop through all
                              the records from STINFOSYS and see if new station should be inserted. If some
                              station already exists we will check if lon/lat or times have been changed.
                              If so, we have to update it.</para>
			
                        <para>IMPORTANT-. WDB is using two placenamespaceids - default and 4365.
                              In default we are using station.stationid as placename value.
                              In 4365 we are using station.wmono as placename value.</para>

			<sect3>
                                <title>GetAllStations</title>

                                <para></para>

			</sect3>
			
			<sect3>
                                <title>AddPlacePoint</title>

                                <para></para>
				
			</sect3>
			
                        <sect3>
                                <title>UpdatePlacePoint</title>
				
                                <para></para>

			</sect3>
			
			<sect3>
                                <title>getPlaceName</title>

                                <para></para>

                        </sect3>


		</sect2>
		
		<sect2>
			<title>Error Handling</title>
			
			<para>Errors in the StationLoad system are resolved through exception handling
			      based on the WdbException base class. All errors are logged using the
			      Log4cpp library for writing log files (encapsulated in wdbLog).</para>
			
		</sect2>
		
	</sect1>
	
</chapter>
